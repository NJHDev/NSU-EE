
// day4Dlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "day4.h"
#include "day4Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// Cday4Dlg 대화 상자




Cday4Dlg::Cday4Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(Cday4Dlg::IDD, pParent)
	, m_iCount(0)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	m_sTime = _T("");
	m_sCount = _T("");
	//  m_iInterval = 0;
	m_iInterval = 0;
}

void Cday4Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_STATICTIME, m_sTime);
	DDX_Text(pDX, IDC_STATICCOUNT, m_sCount);
	//  DDX_Text(pDX, IDC_INTERVAL, m_iInterval);
	DDX_Control(pDX, IDC_STARTTIME, m_cStartTime);
	DDX_Control(pDX, IDC_STOPTIMER, m_cStopTime);
	DDX_Text(pDX, IDC_INTERVAL, m_iInterval);
}

BEGIN_MESSAGE_MAP(Cday4Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_TIMER()
	ON_EN_CHANGE(IDC_INTERVAL, &Cday4Dlg::OnChangeInterval)
	ON_BN_CLICKED(IDC_STARTTIME, &Cday4Dlg::OnClickedStarttime)
	ON_BN_CLICKED(IDC_STOPTIMER, &Cday4Dlg::OnClickedStoptimer)
	ON_BN_CLICKED(IDC_EXIT, &Cday4Dlg::OnClickedExit)
END_MESSAGE_MAP()


// Cday4Dlg 메시지 처리기

BOOL Cday4Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.
	m_iInterval = 1000;

	UpdateData(FALSE);

	SetTimer(ID_CLOCK_TIMER, 1000, NULL);
	
	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void Cday4Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void Cday4Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR Cday4Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void Cday4Dlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	
	//현재시간 얻기
	CTime curTime = CTime::GetCurrentTime();

	//어느 타이머가 이벤트 발생?
	switch (nIDEvent)
	{
	//시계냐?
	case ID_CLOCK_TIMER:
		//표시해드림
		m_sTime.Format(L"%02d:%02d:%02d", curTime.GetHour(), curTime.GetMinute(), curTime.GetSecond());
		break;
	//카운트 타이머냐?
	case ID_COUNT_TIMER:
		//카운트 올려드림
		m_iCount++;
		m_sCount.Format(L"%d", m_iCount);
		break;
	}

	//Dlg 갱신
	UpdateData(FALSE);

	CDialogEx::OnTimer(nIDEvent);
}


void Cday4Dlg::OnChangeInterval()
{
	// TODO:  RICHEDIT 컨트롤인 경우, 이 컨트롤은
	// CDialogEx::OnInitDialog() 함수를 재지정 
	//하고 마스크에 OR 연산하여 설정된 ENM_CHANGE 플래그를 지정하여 CRichEditCtrl().SetEventMask()를 호출하지 않으면
	// 이 알림 메시지를 보내지 않습니다.

	// TODO:  여기에 컨트롤 알림 처리기 코드를 추가합니다.
	UpdateData(TRUE);
}


void Cday4Dlg::OnClickedStarttime()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	
	//변수 Update
	UpdateData(TRUE);

	//카운트 초기화
	m_iCount = 0;

	//카운트 가지고 문자열 서식화
	m_sCount.Format(L"%d", m_iCount);

	//Dlg Update
	UpdateData(FALSE);

	//START
	SetTimer(ID_COUNT_TIMER, m_iInterval, NULL);

	//If START_Button Clicked
	m_cStartTime.EnableWindow(FALSE);
	m_cStopTime.EnableWindow(TRUE);
}

void Cday4Dlg::OnClickedStoptimer()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.

	//타이머 중지
	KillTimer(ID_COUNT_TIMER);

	//If STOP_Button Clicked
	m_cStartTime.EnableWindow(TRUE);
	m_cStopTime.EnableWindow(FALSE);
}

void Cday4Dlg::OnClickedExit()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	OnOK();
}